@model SinExWebApp20328381.Models.Invoice

@{
    ViewBag.Title = "FillActualWeight";
}

@section CustomScripts{
    <script>
        $(document).ready(function () {
            $('.Weighterror').hide();
            $('.Weighterror2').hide();
            $('.Taxerror').hide();
            $('.Taxerror2').hide();
            $('.dutyerror').hide();
            $('.dutyerror2').hide();
            $('.submit').click(function (event) {
                var i = 0;
                 $('.weight').each(function(){
                     if (valid_weight($(this).val())) {
                         $('.Weighterror').hide();
                     } else {
                         $('.Weighterror').show();
                         event.preventDefault();
                     }
                 });
                 $('.weight').each(function () {
                     if ($(this).val() >= 0) {
                         $('.Weighterror2').hide();
                     } else {
                         $('.Weighterror2').show();
                         event.preventDefault();
                     }
                 });
                 $('.tax').each(function () {
                     if (valid_tax($(this).val())) {
                         $('.Taxerror').hide();
                     } else {
                         $('.Taxrror').show();
                         event.preventDefault();
                     }
                     if ($(this).val() >= 0) {
                         $('.Taxerror2').hide();
                     } else {
                         $('.Taxerror2').show();
                         event.preventDefault();
                     }
                 });
                 $('.duty').each(function () {
                     if (valid_tax($(this).val())) {
                         $('.dutyerror').hide();
                     } else {
                         $('.dutyerror').show();
                         event.preventDefault();
                     }
                     if ($(this).val() >= 0) {
                         $('.dutyerror2').hide();
                     } else {
                         $('.dutyerror2').show();
                         event.preventDefault();
                     }
                 });
                
            });
        });

        function valid_weight(weight) {
            var patten = new RegExp(/^\d{1,18}(\.\d{1})?$|^-1/);
            return patten.test(weight);
        }

        function valid_tax(weight) {
            var patten = new RegExp(/^\d{1,18}(\.\d{1,2})?$|^-1/);
            return patten.test(weight);
        }    </script>
}
<h2>FillActualWeight</h2>
@if(ViewBag.NoPickup == "Yes")
{
    @:The packages of this shipment is still not picked up so you can not input their actual weights!
    @:Please click the link beblow to update status and then try this page again and you will be able to fill in the actual weight of packages! Thank you!
    <br>
    @Html.ActionLink("Click this to update status","Search", "ShipmentStatusHistories")
}
else if (ViewBag.IsInvoiced == "Yes")
{
    @:The shipment is already invoiced!
    <br>
    @Html.ActionLink("Return", "SearchWayBill", "Invoices")
}
else
{
    using (Html.BeginForm("FillActualWeight", "Invoices", FormMethod.Post))
    {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
        <h4>Invoice</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.InvoiceId)
        @Html.HiddenFor(model => model.WaybillId)

    
        Please input the value of tax and duty based on <b class="text-danger" style="font-size:2em">CNY</b>. This system will translate it to corresponding currency when user see the invoice!

        <div class="form-group">
            @Html.LabelFor(model => model.shipment.Duty, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.shipment.Duty, new { htmlAttributes = new { @class = "form-control duty" } })
                @Html.ValidationMessageFor(model => model.shipment.Duty, "", new { @class = "text-danger", id = "shipment.Duty" }) 
                <span class="dutyerror" style="color:red">The Tax can only be 2 decimal!</span>
                <span class="dutyerror2" style="color:red">The Tax can not be less than 0!</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.shipment.Tax, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.shipment.Tax, new { htmlAttributes = new { @class = "form-control tax" } })
                <span class="Taxerror" style="color:red">The Tax can only be 2 decimal!</span>
                <span class="Taxerror2" style="color:red">The Tax can not be less than 0!</span>
            </div>
        </div>
   
        <table class="table">
            <tr>
                <th>
                    Package Type
                </th>
                <th>
                    Customer Weight
                </th>
                <th>
                    Actual Weight
                </th>
             
                <th></th>
            </tr>
            @{ int i = 0;}
            @foreach (var package in Model.shipment.Packages)
{

                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => package.PackageType.Type)

                        </td>
                        <td>
                            @Math.Round(package.Weight,1)
                        </td>
                        <td>@if (package.PackageType.Type != "Envelope") {
                            @Html.EditorFor(model => package.ActualWeight, new { htmlAttributes = new { @class = "form-control weight", id = "shipment.Packages[" + @i + "].ActualWeight", Name = "shipment.Packages[" + @i + "].ActualWeight" } })
                            }
                        else
                        {
                            @Html.EditorFor(model => package.ActualWeight, new { htmlAttributes = new { @class = "form-control weight", id = "shipment.Packages[" + @i + "].ActualWeight", Name = "shipment.Packages[" + @i + "].ActualWeight", @ReadOnly = "ReadOnly", @Value = 1 } }) 
                        }

                        </td>


                    </tr>
                i = i + 1;
}
        </table>
         <span class="Weighterror" style="color:red">The Actual weight can only be 1 decimal!</span>
         <span class="Weighterror2" style="color:red">The Actual weight can not be less than 0!</span>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default submit" />
            </div>
        </div>
    </div>
       }
}


